[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Sobre el club",
    "section": "",
    "text": "La idea es que podamos reunirnos para comenzar a programar usando R y RStudio. Si bien al principio vamos a ver temas muy introductorios, a medida de que avancen las reuniones se van a poner tocar temas m√°s complejos y que est√©n relacionados con sus √°reas de inter√©s.\nOtra de mis intenciones es que esta pagina (ac√° o en otro lado) se actualice conforme vayamos reuni√©ndonos, as√≠ pueden tener un lugar donde volver a ver lo que charlamos en cada juntada. O mismo si quieren compartir el contenido, sepan que esto es para cualquiera que tenga un m√≠nimo de inter√©s, as√≠ que si√©ntanse libres de compartir :)"
  },
  {
    "objectID": "about.html#indice",
    "href": "about.html#indice",
    "title": "Sobre el club",
    "section": "Indice",
    "text": "Indice\n\nLink a la reuni√≥n de cada Jueves\n\n\n\n\nT√≥pico\nReuniones\n\n\n\n\nArrancando con R - RStudio y Proyectos\nReuni√≥n 1\n\n\nCrear primer Proyecto y Reporte Reproducible\nReuni√≥n 2\n\n\nManejo de datos: dplyr\nReunion 3\n\n\nTrabajando con referencias\nReunion 4\n\n\nA graficar!!\nReunion 5\n\n\nTablas\nReunion 6\n\n\n\n\n\n\nReceso de fin de a√±o\n\n\n\n\n\n\n\nVarios\nRecursos"
  },
  {
    "objectID": "contacto.html",
    "href": "contacto.html",
    "title": "Formulario de Contacto",
    "section": "",
    "text": "Cargando‚Ä¶"
  },
  {
    "objectID": "contacto2.html",
    "href": "contacto2.html",
    "title": "Formulario de Contacto",
    "section": "",
    "text": "Formulario en construcci√≥n\n\n \nSugerencias? Queres formar parte? Ponete en contacto!\n\nNombre\n  \n\n\nApellido\n  \n\n\nTu mensaje :)\n\n\n\nUn mail de contacto"
  },
  {
    "objectID": "galeria.html",
    "href": "galeria.html",
    "title": "Galeria de gr√°ficos",
    "section": "",
    "text": "Primer gr√°fico\n\n\n\ngrafico\n\n\nclub\n\n\n\n\n\n\n\nFer, CdC\n\n\nDec 7, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog del Club",
    "section": "",
    "text": "Pr√≥ximamente\n\n\n\n\n\n\n\nopinion\n\n\nclub\n\n\n\n\n\n\n\n\n\n\n\nDec 5, 2022\n\n\nParticipante, CdC\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "muestra/cuadro1/index.html",
    "href": "muestra/cuadro1/index.html",
    "title": "Primer gr√°fico",
    "section": "",
    "text": "Dinoplot1\n\n\n\n\n\n\n\n\n\n\nReferences\n\nDavies, Rhian, Steph Locke, and Lucy D‚ÄôAgostino McGowan. 2022. datasauRus: Datasets from the Datasaurus Dozen. https://CRAN.R-project.org/package=datasauRus.\n\nFootnotes\n\nDatos de (Davies, Locke, and D‚ÄôAgostino McGowan 2022)‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/nueva-seccion/index.html",
    "href": "posts/nueva-seccion/index.html",
    "title": "Pr√≥ximamente",
    "section": "",
    "text": "Con la migraci√≥n forzada de la web, se me ocurri√≥ agregar un secci√≥n tipo blog donde se puedan ir agregando post que escribamos. Tal vez a modo de experiencias o comentando algo nuevo que aprendimos"
  },
  {
    "objectID": "recursos.html",
    "href": "recursos.html",
    "title": "Recursos",
    "section": "",
    "text": "c√≥digo comentado üîó Click ac√° üîó\n\n\nEl link de arriba lleva al repositorio del club. Ah√≠ van a poder encontrar ejemplos de c√≥digo comentado. Lo importante es tener un recurso que se pueda leer en espa√±ol y en R.\n\n\n\n\n\n\nSobre comentar\n\n\n\n\n\nEs una muy buena pr√°ctica comentar nuestro c√≥digo. Muy pocos comentarios pueden no ser suficientes para explicar todo el programa. Muchos comentarios pueden ser contraproducentes para entender el programa. Lo importante es encontrar el balance y poder comentar cada vez un poquito mejor.\n\n\n\n\nbibliometrix\n\nEn este caso bibliometrix es un paquete para bibliometr√≠a. En pocas palabras los paquetes son conjuntos de funciones y se instalan asi install.packages(\"nombre del paquete\").\n\nVer/Ocultar c√≥digoinstall.packages(\"bibliometrix\")\n\nlibrary(bibliometrix)\n\n\nEsto se hace una sola vez. Una vez instalados, cada vez que iniciemos R vamos a tener que ‚Äúllamar‚Äù o cargar los paquetes que necesitemos. Eso lo hacemos con la funci√≥n library.\n\n\n\n\n\n\nClick para expandir\n\n\n\n\n\nPodemos pensar install.packages y library como si fueran cosas para la casa. En este sentido, cuando la casa se esta construyendo se hace la instalaci√≥n de las tuber√≠as de agua. Es decir se instala el agua (install.packages()). Una vez instalada, se pueden usar las canillas para abrir y cerrar el agua. En este sentido, activar el agua seria como activar un paquete library()\n\n\n\n\nsynthpop\n\nEste es un paquete que nos va a dar las herramientas necesarias para generar datos ‚Äúsint√©ticos‚Äù. Es decir, datos que no son los originales, pero que al analizarlos podemos llegar a los mismos resultados. Esto es util para aquellos casos en los que no se puede compartir los datos originales (E. datos sensibles).\nSe instala de la siguiente manera. Una vez instalado se lo carga utilizando la funci√≥n library()\n\nVer/Ocultar c√≥digoinstall.packages(\"synthpop\")\n\nlibrary(synthpop)\n\n\nVideotutorial sobre como se usa synthpop"
  },
  {
    "objectID": "reunion1.html",
    "href": "reunion1.html",
    "title": "Club~Del~C√≥digo",
    "section": "",
    "text": "Click para expandir\n\n\n\n\n\nEs importante siempre tener en cuenta que sistema operativo tenemos en nuestra computadora.\n\n\n\nEs importante instalar R y RStudio porque de lo contrario algunos paquetes que usemos podr√≠an no instalarse bien o directamente no instalarse. Entonces:\n\nDescargar e instalar R (base R). Para eso abrir este link y elegir cualquiera de las opciones. Yo por ejemplo eleg√≠ el mirror de la plata\n\n\n\n\n\n\n\nDescargar e instalar RStudio. Para eso abrir este link\n\n\n\n\n\n\n\n\n\nRStudio es un entorno de desarrollo integrado (IDE) para el lenguaje de programaci√≥n R, dedicado a la programaci√≥n estad√≠stica y a la visualizaci√≥n de datos entre otras cosas. En si, RStudio proporciona un editor incorporado, funciona en todas las plataformas (incluyendo en servidores) y proporciona muchas ventajas, como la integraci√≥n con version control y gesti√≥n de proyectos.\nLo primero que van a ver\nCuando abra RStudio por primera vez, van a ver tres paneles (toooodo esto se puede modificar):\n\nLa consola/Terminal R interactiva\nEntorno/Historial/Conexiones\nArchivos/Gr√°ficos/Paquetes/Ayuda/Viewer\n\n\n\n\n\n\nSecci√≥n de Archivos/Gr√°ficos/Paquetes/Ayuda\nEn esta secci√≥n se presentan todos los archivos, carpetas, datos que tengamos en nuestro proyecto. Ac√° vamos a poder crear carpetas, modificar nombres, mover archivos etc. En la pesta√±a de Archivos, un proyecto b√°sico se ve de la siguiente manera:\n\n\n\n\n\nEl resto de pesta√±as estar√°n compuestas por aquello que indique su nombre. En la pesta√±a Plots/Gr√°ficos podremos ver los gr√°ficos que generemos, en la pesta√±a Paquetes veremos los paquetes que tenemos instalados y que est√©n (o no) cargados en ese momento y en la pesta√±a Help/Ayuda encontraremos gran parte de la documentaci√≥n de los paquetes y de las funciones que necesitemos.\nEl entorno\nEn el entorno global se listaran todos los objetos que vayamos creando, ya sean bases de datos, variables, en si todo las cosas que estemos manejando en ese momento. Ademas de mostrarnos todos nuestros objetovs, tambi√©n vamos a obtener informaci√≥n del tipo (numeros, cadenas de caracteres, data frame etc), su tama√±o y medida, y sobre aquello que contiene. En el caso del data.frame se puede ver que es una base con dos variables (columnas) y 5 filas (observaciones)\n\n\n\n\n\nLa consola\nLa consola de R aparece en el cuadro inferior izquierdo apenas abrimos RStudio y corresponde al entorno computacional de este lenguaje. En pocas palabras, todo el codigo que escribimos es interpretado en la consola. Podemos escribir c√≥digo directamente en la consola y R nos dar√° el resultado de lo pidamos all√≠ mismo.\nPor ejemplo, en la imagen de abajo vemos que podemos pedirle a R que calcule la media de una serie de n√∫meros que va del 1 al 20 (mean(1:20)) y R nos arroja el resultado. Todo esto en la misma consola.\n\n\n\n\n\nComo dijimos, la consola interpreta todo el c√≥digo que escribamos o le enviemos desde nuestro script (m√°s abajo vemos esto). Tambi√©n la consola va a ir registrando todo lo que le enviemos. Por ejemplo, ahora le pedimos que calcule el desvi√≥ est√°ndar de la misma serie de n√∫meros del ejemplo anterior sd(1:20)\n\n\n\n\n\nOtro aspecto importante de la consola es que te informa la versi√≥n de R que estamos utilizando (1), en donde estamos trabajando (2) y si actualmente se encuentra interpretando c√≥digo\n\n\n\n\n\nPor ultimo, lo cabe destacar que la consola se reiniciara cada vez que cerremos y abramos RStudio. Por lo que es importante no trabajar constantemente en esta secci√≥n. Lo mejor es crear un nuevo archivo .R y trabajar ahi. En un archivo .R podremos volver a nuestro c√≥digo, siempre y cuando guardemos nuestro archivo antes de cerrar el programa.\n\n\n\n\n\n\n\n\n(cargar video de creacion de proyectos)\n\n\n\n\n\n\nClick para expandir\n\n\n\n\n\nFile -> New Project -> New Directory -> New Project Ahi ponemos nombre del proyecto y elejimos donde se va a crear\n\n\n\nEstructura b√°sica de un proyecto\n\n\n\n\n\nEn nuestro RStudio‚Ä¶"
  },
  {
    "objectID": "reunion2.html",
    "href": "reunion2.html",
    "title": "Club~Del~C√≥digo",
    "section": "",
    "text": "Segunda reuni√≥n\n\n\n\n\n\nAhora hablando en serio: esta reuni√≥n se hablo mucho as√≠ que demanda bastante tiempo pasarla a papel (o archivo .qmd :p)"
  },
  {
    "objectID": "reunion3.html",
    "href": "reunion3.html",
    "title": "Tercera Reunion",
    "section": "",
    "text": "El manejo de datos (carga, limpieza, orden, visualizaci√≥n, modelado, ver imagen de abajo) es una de las tareas a las que mayor tiempo le dedicaremos cuando estemos trabajando con R. Uno de los paquetes m√°s utilizados para llevar adelante esta tarea es dplyr. Este paquete forma parte del tidyverse y contiene una serie de funciones que nos dejaran seleccionar, renombrar, filtrar, re-acomodar y resumir las variables de nuestra base de datos. Conviene pensar en dplyr como una gram√°tica para el manejo de datos.\n\n\n\n\n\nAca la realidad es que se pueden utilizar todo tipo de bases de datos. Se podr√≠an usar las bases que vienen en el mismo R como por ejemplo iris o tambi√©n la base de pinguinos del paquete palmerpenguins. Esas bases siempre las tendremos a disposici√≥n. Sin embargo hoy vamos a trabajar con algunas funciona de dplyr utilizando una base con datos bibliom√©tricos que fue generada utilizando la herramienta Constellate de jstor. Esta base es bastante cercana a lo que podriamos conseguir en ‚Äúel mundo real‚Äù porque tiene datos faltantes, esta re desordanada, tiene malos nombres de variables etc‚Ä¶\nPara acceder a los datos podemos hacer click aca o directamente entrar al repositorio y descargarlos manualmente: https://osf.io/bwdvy/?view_only=\nUna vez descargados los datos es conveniente guardarlos en la carpeta datos de nuestro proyecto.\nOtra opci√≥n es ejecurtar este codigo. De esta manera la funcion dowload.file tomara la url que ingresemos, desgarcar√° el archivo y lo guardar√° donde le indiquemos. En este caso en la carpeta datos de nuestro proyecto\n\n\n\n\n\n\nATENCI√ìN!!\n\n\n\n\n\nPara que esto funcione ya debemos tener creada la carpeta datos en nuestro proyecto\n\n\n\n\nVer/Ocultar c√≥digodownload.file(url = \"https://osf.io/download/cp2kz\", # URL donde esta el archivo a descargar\n              destfile = \"datos/datos_cdc.csv\") # carpeta donde se guardara el archivo\n\nlibrary(readr) # Para leer datos\ndatos_cdc <- read_csv(\"datos/datos_cdc.csv\") # Funcion para leer datos csv (separados por coma)\n\nglimpse() # Esto es para darle un vistazo a la base\n\n\n\nPodemos pensar el manejo de datos con dplyr como si las funciones del paquete fueran verbos. Cuales son esos verbos?\n\n\n\n\n\n\n\nVerbo\nFunci√≥n\nDescripci√≥n\n\n\n\nFiltrar\nfilter()\nEsta funci√≥n maneja los datos seg√∫n sus filas. Lo que hace es filtrar datos seg√∫n la l√≥gica que le indiquemos.\n\n\nSeleccionar\nselect()\nEsta funciona maneja los datos seg√∫n las columnas. Lo que hace es seleccionar (o tambi√©n quitar) variables (columnas de nuestra base de datos)\n\n\nCrear\nmutate()\nEsta funci√≥n tambi√©n modifica columnas y lo que hace es crear variables nuevas.\n\n\nOrdenar\narrange()\nEsta funci√≥n maneja seg√∫n las filas de alguna columna seleccionada. Lo que hace es ordenar la base de datos de menor a mayor (o viceversa) segun los datos de una variable. B√°sicamente es como el bot√≥n de Ordenar y Filtrar de excel.\n\n\nAcomodar\nrelocate()\nEsta funci√≥n tambi√©n trabaja con columnas y lo que hace es re-ordenarlas. Emula lo que com√∫nmente se hace con el mouse. Indicamos que variables queremos mover y hacia donde.\n\n\nRenombrar\nrename()\nEsta funci√≥n trabaja con columnas y lo que hace es renombrarlas. El orden es: nombre nuevo = nombre viejo\n\n\nResumir\nsummarise()\nEsta funci√≥n genera un resumen de nuestros datos ya sean generales o agrupados utilizando la funci√≥n de abajo group_by()\n\n\n\nAgrupar\ngroup_by()\nEsta funci√≥n agrupa los datos seg√∫n una variable categ√≥rica en particular.\n\n\n\nLa manera de utilizar estas herramientas es bastante simple. Se escribe la funci√≥n que necesitemos, se indican los datos en los que vamos a trabajar y luego se indica aquello que necesitemos hacer.\n\n\nVer/Ocultar c√≥digolibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.2\n\n\nWarning: package 'ggplot2' was built under R version 4.2.2\n\n\nWarning: package 'tibble' was built under R version 4.2.2\n\n\nWarning: package 'tidyr' was built under R version 4.2.2\n\n\nWarning: package 'readr' was built under R version 4.2.2\n\n\nWarning: package 'purrr' was built under R version 4.2.2\n\n\nWarning: package 'dplyr' was built under R version 4.2.2\n\n\nWarning: package 'stringr' was built under R version 4.2.2\n\n\nWarning: package 'forcats' was built under R version 4.2.2\n\n\nPseudocodigo\n\nVer/Ocultar c√≥digofuncion(datos, lo que necesitamos)\n\n\nPseudocodigo con un objetivo m√°s claro\n\nVer/Ocultar c√≥digofiltrar(datos, variable mayor que 1)\n\n\nCodigo para alcanzar el objetivo\n\nVer/Ocultar c√≥digofilter(.data = starwars, height > 175) # En este caso solo necesito aquellos datos de quienes tengan una altura mayor a 175 cm\n\n# A tibble: 48 √ó 14\n   name        height  mass hair_‚Ä¶¬π skin_‚Ä¶¬≤ eye_c‚Ä¶¬≥ birth‚Ä¶‚Å¥ sex   gender homew‚Ä¶‚Åµ\n   <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n 1 Darth Vader    202 136   none    white   yellow     41.9 male  mascu‚Ä¶ Tatooi‚Ä¶\n 2 Owen Lars      178 120   brown,‚Ä¶ light   blue       52   male  mascu‚Ä¶ Tatooi‚Ä¶\n 3 Biggs Dark‚Ä¶    183  84   black   light   brown      24   male  mascu‚Ä¶ Tatooi‚Ä¶\n 4 Obi-Wan Ke‚Ä¶    182  77   auburn‚Ä¶ fair    blue-g‚Ä¶    57   male  mascu‚Ä¶ Stewjon\n 5 Anakin Sky‚Ä¶    188  84   blond   fair    blue       41.9 male  mascu‚Ä¶ Tatooi‚Ä¶\n 6 Wilhuff Ta‚Ä¶    180  NA   auburn‚Ä¶ fair    blue       64   male  mascu‚Ä¶ Eriadu \n 7 Chewbacca      228 112   brown   unknown blue      200   male  mascu‚Ä¶ Kashyy‚Ä¶\n 8 Han Solo       180  80   brown   fair    brown      29   male  mascu‚Ä¶ Corell‚Ä¶\n 9 Jek Tono P‚Ä¶    180 110   brown   fair    blue       NA   male  mascu‚Ä¶ Bestin‚Ä¶\n10 Boba Fett      183  78.2 black   fair    brown      31.5 male  mascu‚Ä¶ Kamino \n# ‚Ä¶ with 38 more rows, 4 more variables: species <chr>, films <list>,\n#   vehicles <list>, starships <list>, and abbreviated variable names\n#   ¬π‚Äãhair_color, ¬≤‚Äãskin_color, ¬≥‚Äãeye_color, ‚Å¥‚Äãbirth_year, ‚Åµ‚Äãhomeworld\n\nVer/Ocultar c√≥digofilter(.data = starwars, species == \"Wookiee\") # En este caso solo necesito los datos de quienes sean de la especie Wookiee\n\n# A tibble: 2 √ó 14\n  name      height  mass hair_color skin_‚Ä¶¬π eye_c‚Ä¶¬≤ birth‚Ä¶¬≥ sex   gender homew‚Ä¶‚Å¥\n  <chr>      <int> <dbl> <chr>      <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Chewbacca    228   112 brown      unknown blue        200 male  mascu‚Ä¶ Kashyy‚Ä¶\n2 Tarfful      234   136 brown      brown   blue         NA male  mascu‚Ä¶ Kashyy‚Ä¶\n# ‚Ä¶ with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¬π‚Äãskin_color, ¬≤‚Äãeye_color,\n#   ¬≥‚Äãbirth_year, ‚Å¥‚Äãhomeworld\n\n\n\nPseudocodigo\n\nVer/Ocultar c√≥digoseleccionar(datos, variable(s) de interes)\n\n\nC√≥digo\n\nVer/Ocultar c√≥digoselect(.data = starwars, c(name, height, mass, gender)) # En este caso solo me interesaban las variables nombre, altura, masa y genero\n\n# A tibble: 87 √ó 4\n   name               height  mass gender   \n   <chr>               <int> <dbl> <chr>    \n 1 Luke Skywalker        172    77 masculine\n 2 C-3PO                 167    75 masculine\n 3 R2-D2                  96    32 masculine\n 4 Darth Vader           202   136 masculine\n 5 Leia Organa           150    49 feminine \n 6 Owen Lars             178   120 masculine\n 7 Beru Whitesun lars    165    75 feminine \n 8 R5-D4                  97    32 masculine\n 9 Biggs Darklighter     183    84 masculine\n10 Obi-Wan Kenobi        182    77 masculine\n# ‚Ä¶ with 77 more rows\n\nVer/Ocultar c√≥digoseleccion1 <- select(.data = starwars, c(name, height, mass, gender))\n\nselect(.data = seleccion1, -height) # En este caso se puede usar el select para quitar una variable. Eso se hace usando un - antes de la variable que queremos quitar.\n\n# A tibble: 87 √ó 3\n   name                mass gender   \n   <chr>              <dbl> <chr>    \n 1 Luke Skywalker        77 masculine\n 2 C-3PO                 75 masculine\n 3 R2-D2                 32 masculine\n 4 Darth Vader          136 masculine\n 5 Leia Organa           49 feminine \n 6 Owen Lars            120 masculine\n 7 Beru Whitesun lars    75 feminine \n 8 R5-D4                 32 masculine\n 9 Biggs Darklighter     84 masculine\n10 Obi-Wan Kenobi        77 masculine\n# ‚Ä¶ with 77 more rows\n\nVer/Ocultar c√≥digoselect(.data = starwars, starts_with(\"h\"))\n\n# A tibble: 87 √ó 3\n   height hair_color    homeworld\n    <int> <chr>         <chr>    \n 1    172 blond         Tatooine \n 2    167 <NA>          Tatooine \n 3     96 <NA>          Naboo    \n 4    202 none          Tatooine \n 5    150 brown         Alderaan \n 6    178 brown, grey   Tatooine \n 7    165 brown         Tatooine \n 8     97 <NA>          Tatooine \n 9    183 black         Tatooine \n10    182 auburn, white Stewjon  \n# ‚Ä¶ with 77 more rows\n\n\n\nPseudocodigo\n\nVer/Ocultar c√≥digocrear(datos, variable(s) que necesito crear = contenido)\n\n\nC√≥digo\n\nVer/Ocultar c√≥digomutate(.data = seleccion1, altura = height/100) # En este caso vamos a crear una nueva variable que contenta la transformacion de height de centimetros a metros\n\n# A tibble: 87 √ó 5\n   name               height  mass gender    altura\n   <chr>               <int> <dbl> <chr>      <dbl>\n 1 Luke Skywalker        172    77 masculine   1.72\n 2 C-3PO                 167    75 masculine   1.67\n 3 R2-D2                  96    32 masculine   0.96\n 4 Darth Vader           202   136 masculine   2.02\n 5 Leia Organa           150    49 feminine    1.5 \n 6 Owen Lars             178   120 masculine   1.78\n 7 Beru Whitesun lars    165    75 feminine    1.65\n 8 R5-D4                  97    32 masculine   0.97\n 9 Biggs Darklighter     183    84 masculine   1.83\n10 Obi-Wan Kenobi        182    77 masculine   1.82\n# ‚Ä¶ with 77 more rows\n\n\n\n\n\n\n\n\nA tener en cuenta!\n\n\n\n\n\nCuando usemos mutate() con una variable que ya existe en el dataset conviene no sobreescribirla. Esto afectar√≠a la reproducibilidad del c√≥digo. Lo mejor es generar una nueva variable con alg√∫n identificador.\nPor ejemplo: Cuando cargamos el dataset vemos que la variable de agrupaci√≥n gender es de tipo chr y lo que necesitamos es que sea un factor. En ese caso se har√≠a lo siguiente:\n\nVer/Ocultar c√≥digomutate(.data = seleccion1, gender_fct = as_factor(gender)) # Nos quedan ambas variables y solo utilizamos la que necesitemos\n\n# A tibble: 87 √ó 5\n   name               height  mass gender    gender_fct\n   <chr>               <int> <dbl> <chr>     <fct>     \n 1 Luke Skywalker        172    77 masculine masculine \n 2 C-3PO                 167    75 masculine masculine \n 3 R2-D2                  96    32 masculine masculine \n 4 Darth Vader           202   136 masculine masculine \n 5 Leia Organa           150    49 feminine  feminine  \n 6 Owen Lars             178   120 masculine masculine \n 7 Beru Whitesun lars    165    75 feminine  feminine  \n 8 R5-D4                  97    32 masculine masculine \n 9 Biggs Darklighter     183    84 masculine masculine \n10 Obi-Wan Kenobi        182    77 masculine masculine \n# ‚Ä¶ with 77 more rows\n\n\n\n\n\n\nPseudocodigo\n\nVer/Ocultar c√≥digoordenar(datos, variable seleccionada)\n\n\nC√≥digo\n\nVer/Ocultar c√≥digoarrange(.data = starwars, height) # Orden de menor a mayor\n\n# A tibble: 87 √ó 14\n   name        height  mass hair_‚Ä¶¬π skin_‚Ä¶¬≤ eye_c‚Ä¶¬≥ birth‚Ä¶‚Å¥ sex   gender homew‚Ä¶‚Åµ\n   <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n 1 Yoda            66    17 white   green   brown       896 male  mascu‚Ä¶ <NA>   \n 2 Ratts Tyer‚Ä¶     79    15 none    grey, ‚Ä¶ unknown      NA male  mascu‚Ä¶ Aleen ‚Ä¶\n 3 Wicket Sys‚Ä¶     88    20 brown   brown   brown         8 male  mascu‚Ä¶ Endor  \n 4 Dud Bolt        94    45 none    blue, ‚Ä¶ yellow       NA male  mascu‚Ä¶ Vulpter\n 5 R2-D2           96    32 <NA>    white,‚Ä¶ red          33 none  mascu‚Ä¶ Naboo  \n 6 R4-P17          96    NA none    silver‚Ä¶ red, b‚Ä¶      NA none  femin‚Ä¶ <NA>   \n 7 R5-D4           97    32 <NA>    white,‚Ä¶ red          NA none  mascu‚Ä¶ Tatooi‚Ä¶\n 8 Sebulba        112    40 none    grey, ‚Ä¶ orange       NA male  mascu‚Ä¶ Malast‚Ä¶\n 9 Gasgano        122    NA none    white,‚Ä¶ black        NA male  mascu‚Ä¶ Troiken\n10 Watto          137    NA black   blue, ‚Ä¶ yellow       NA male  mascu‚Ä¶ Toydar‚Ä¶\n# ‚Ä¶ with 77 more rows, 4 more variables: species <chr>, films <list>,\n#   vehicles <list>, starships <list>, and abbreviated variable names\n#   ¬π‚Äãhair_color, ¬≤‚Äãskin_color, ¬≥‚Äãeye_color, ‚Å¥‚Äãbirth_year, ‚Åµ‚Äãhomeworld\n\nVer/Ocultar c√≥digoarrange(.data = starwars, desc(height)) # Orden de mayor a menor\n\n# A tibble: 87 √ó 14\n   name        height  mass hair_‚Ä¶¬π skin_‚Ä¶¬≤ eye_c‚Ä¶¬≥ birth‚Ä¶‚Å¥ sex   gender homew‚Ä¶‚Åµ\n   <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n 1 Yarael Poof    264    NA none    white   yellow     NA   male  mascu‚Ä¶ Quermia\n 2 Tarfful        234   136 brown   brown   blue       NA   male  mascu‚Ä¶ Kashyy‚Ä¶\n 3 Lama Su        229    88 none    grey    black      NA   male  mascu‚Ä¶ Kamino \n 4 Chewbacca      228   112 brown   unknown blue      200   male  mascu‚Ä¶ Kashyy‚Ä¶\n 5 Roos Tarpa‚Ä¶    224    82 none    grey    orange     NA   male  mascu‚Ä¶ Naboo  \n 6 Grievous       216   159 none    brown,‚Ä¶ green,‚Ä¶    NA   male  mascu‚Ä¶ Kalee  \n 7 Taun We        213    NA none    grey    black      NA   fema‚Ä¶ femin‚Ä¶ Kamino \n 8 Rugor Nass     206    NA none    green   orange     NA   male  mascu‚Ä¶ Naboo  \n 9 Tion Medon     206    80 none    grey    black      NA   male  mascu‚Ä¶ Utapau \n10 Darth Vader    202   136 none    white   yellow     41.9 male  mascu‚Ä¶ Tatooi‚Ä¶\n# ‚Ä¶ with 77 more rows, 4 more variables: species <chr>, films <list>,\n#   vehicles <list>, starships <list>, and abbreviated variable names\n#   ¬π‚Äãhair_color, ¬≤‚Äãskin_color, ¬≥‚Äãeye_color, ‚Å¥‚Äãbirth_year, ‚Åµ‚Äãhomeworld\n\n\n\nPseudocodigo\n\nVer/Ocultar c√≥digoacomodar(datos, variable, antes/despues de)\n\n\nC√≥digo\n\nVer/Ocultar c√≥digorelocate(.data = seleccion1, gender, .after = name) # En este caso acomodamos gender despues de name\n\n# A tibble: 87 √ó 4\n   name               gender    height  mass\n   <chr>              <chr>      <int> <dbl>\n 1 Luke Skywalker     masculine    172    77\n 2 C-3PO              masculine    167    75\n 3 R2-D2              masculine     96    32\n 4 Darth Vader        masculine    202   136\n 5 Leia Organa        feminine     150    49\n 6 Owen Lars          masculine    178   120\n 7 Beru Whitesun lars feminine     165    75\n 8 R5-D4              masculine     97    32\n 9 Biggs Darklighter  masculine    183    84\n10 Obi-Wan Kenobi     masculine    182    77\n# ‚Ä¶ with 77 more rows\n\nVer/Ocultar c√≥digorelocate(.data = seleccion1, name, .before = mass) # En este caso acomodamos name despues de mass\n\n# A tibble: 87 √ó 4\n   height name                mass gender   \n    <int> <chr>              <dbl> <chr>    \n 1    172 Luke Skywalker        77 masculine\n 2    167 C-3PO                 75 masculine\n 3     96 R2-D2                 32 masculine\n 4    202 Darth Vader          136 masculine\n 5    150 Leia Organa           49 feminine \n 6    178 Owen Lars            120 masculine\n 7    165 Beru Whitesun lars    75 feminine \n 8     97 R5-D4                 32 masculine\n 9    183 Biggs Darklighter     84 masculine\n10    182 Obi-Wan Kenobi        77 masculine\n# ‚Ä¶ with 77 more rows\n\n\n\nPseudocodigo\n\nVer/Ocultar c√≥digorenombrar(datos, nombre nuevo = nombre viejo)\n\n\nC√≥digo\n\nVer/Ocultar c√≥digoseleccion1_traducida <- rename(seleccion1,\n                               nombre = name,\n                               altura = height,\n                               masa_kg = mass,\n                               genero = gender)\n\nnames(seleccion1)\n\n[1] \"name\"   \"height\" \"mass\"   \"gender\"\n\nVer/Ocultar c√≥digonames(seleccion1_traducida)\n\n[1] \"nombre\"  \"altura\"  \"masa_kg\" \"genero\" \n\n\n\nLos verbos que proporciona dplyr son geniales y muy faciles de utilizar, pero para todo lo que hicimos m√°s arriba se necesito una linea de codigo para cada verbo. Es decir, cada codigo era independiente del otro. Una gran funcion que permite unificar todos los verbos en un solo programa es la pipa, tuberia o lo que se dice piping.\nLes presento a ella %>% el operador del paquete magrittr. Lo que hace es tomar el resultado de una funci√≥n y pasarla a otra funci√≥n como argumento. Esto nos permite vincular una secuencia de pasos de an√°lisis. O en otras palabras, utilizar varios verbos de dplyr en un mismo programa.\nPor ejemplo: Se necesita seleccionar algunas variables, renombrarlas y crear variables que sean del tipo correcto. Por ultimo, graficar la altura seg√∫n el sexo del personaje\nSin %>%\n\nVer/Ocultar c√≥digopaso_1 <- select(.data = starwars, c(name, sex, gender, species, mass, height))\n\npaso_2 <- rename(.data = paso_1, nombre = name,\n                                 sexo = sex,\n                                 genero = gender,\n                                 especie = species,\n                                 masa_kg = mass,\n                                 altura = height)\n\npaso_3 <- mutate(.data = paso_2, sexo_fct = as_factor(sexo),\n                                 genero_fct = as_factor(genero),\n                                 especie_fct = as_factor(especie))\n\nggplot(data = select(paso_3, c(sexo_fct, altura, genero_fct)), mapping = aes(x = sexo_fct, y = altura)) +\n  geom_boxplot() +\n  coord_flip() +\n  theme_bw()\n\nWarning: Removed 6 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nCon %>%\n\nVer/Ocultar c√≥digostarwars %>% # Selecciono los datos Y DESPUES\n  select(name, sex, gender, species, mass, height) %>% #Selecciono las variables Y DESPUES\n  rename(nombre = name, \n         sexo = sex,\n         genero = gender,\n         especie = species,\n         masa_kg = mass,\n         altura = height) %>% # Renombro las variables Y DESPUES\n  mutate(sexo_fct = as_factor(sexo),\n         genero_fct = as_factor(genero),\n         especie_fct = as_factor(especie)) %>% # Creo nuevas variables Y DESPUES\n  ggplot()+ # Grafico\n  geom_boxplot(mapping = aes(x = sexo_fct, y = altura)) +\n  coord_flip() +\n  theme_bw()\n\nWarning: Removed 6 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\n\nAspectos a tener en cuenta!!\n\n\n\n\n\n\nMe encanto la pipa, pero es medio complicada de escribir. Si, es verdad. Para eso usamos el siguiente atajo del teclado CTRL + SHIFT + M y ya tenemos la pipa. Con un poco de practica ya sale sola.\nExiste otra pipa que fue introducida recientemente. Yo le digo el pinguinito. Es la pipa nativa de R y es as√≠ |>. En general cumple la misma funci√≥n. Yo como soy viejo y me acostumbre a usar %>% entonces sigo con esa. Ustedes usen la que mas les guste y cumpla mejor con sus objetivos. Hay debate sobre que pipa usar. Quedara para otro momento."
  },
  {
    "objectID": "reunion4.html",
    "href": "reunion4.html",
    "title": "Cuarta Reuni√≥n",
    "section": "",
    "text": "Como charlamos en la reuni√≥n anterior (INSERTAR LINK) existen tareas que nos demandan mucho tiempo ‚ú® carga, limpieza y orden de los datos ‚ú®. Otra de las tareas que consumen much√≠simo tiempo y pueden realizarse de manera casi autom√°tica es la de citar y generar referencias de nuestro documentos. Y si a esto le sumamos que luego debemos formatear nuestras referencias, entonces el tiempo es mucho mayor.\n\n\n\n\n\nLa buena noticia es que todo esto se puede hacer con R! En unos simples pasos van a poder obtener la informacion necesaria para genera la referencia y luego poder incluirla en el cuerpo del texto. Una vez alli solo resta elegir el formato y listo! Vamos por partes:\n\nLo primero que necesitamos es un archivo que le brinde a R los datos necesarios del documento que estemos utilizando. Algunos de esos datos son titulo, autores, a√±o de publicaci√≥n‚Ä¶En fin, todo eso que necesitamos para luego incluir en las referencias. Ese archivo fuente de datos bibliogr√°ficos puede ser un archivo BibLaTeX o un archivo BibTeX. En este caso vamos a usar el primero cuyo formato sera .bib. Para crear ese archivo tan solo debemos hacer click en el icono de generar nuevo archivo y luego seleccionar Text File como se muestra en la imagen de abajo\n\n\n\n\nEn este archivo vamos a incluir la informaci√≥n del documento ¬øD√≥nde se consigue esa informaci√≥n? Eso puede realizarse manualmente copiando lo que nos arrojan paginas como Google Sholar. Para eso debemos buscar nuestro documento en la web. Luego se debe hacer click en el bot√≥n Citar\n\n\n\n\nEl navegador nos va a mostrar una ventana con las referencias y debajo de todo algunas opciones extra. Entre ellas se encuentra BibTex. Hacemos click en eso.\n\n\n\n\nUna vez all√≠ debemos seleccionar y luego copiar lo que aparece en el navegador.\n\n\n\n\nCopiada la informaci√≥n, entonces la pegamos en el archivo de texto que creamos al principio y le damos click a guardar.\n\n\n\n\nEn la ventana de Guardar tenemos que ponerle un nombre al archivo (puede ser cualquier cosa, por ejemplo: biblio/bibliografia). Y ahora viene lo importante. Luego del nombre se debe escribir .bib. Para finalizar le damos click a guardar/save. Como resultado obtenemos nuestro archivo .bib con la informacion necesaria para citar luego.\n\n\n\n\n\nEl archivo .csl es lo que le da el formato a la referencia. Entonces si necesitamos formato apa el csl tiene que ser el de la apa, si necesitamos formato MLA entonces tiene que ser el archivo csl que contenga la info para formatear la referencia en el estilo MLA. As√≠ con todas. Hay archivos csl para todos los gustos y con el estilo necesario para distintos journals y agrupaciones. Nosotros nos vamos a enfocar en APA. Por lo tanto vamos a necesitar el csl de las normas apa.\nPara conseguir el archivo podemos ir al Repositorio de Estilos de Zotero y buscar el formato APA. Una vez all√≠ solo resta hacer click en donde muestra la ultima flecha y autom√°ticamente se descargar√° el archivo .csl\n\n\n\n\nAqu√≠ lo importante es que ese archivo que se descarg√≥ lo ubiquemos en nuestro proyecto. Por lo que nuestra secci√≥n Files de RStudio deber√≠a mostrar, entre todo lo dem√°s, los dos archivos que agregamos recientemente: el archivo .bib y el archivo .csl\n\n\n\n\n\nBueno, ya contamos con nuestros dos archivos. Ahora tenemos que indicarle a R que los lea. Para eso tenemos que agregarlo al principio del archivo en el YALM (esa secci√≥n entre --- donde tambi√©n incluimos el t√≠tulo, autores, fecha etc‚Ä¶). Con agregar bibliography: biblio.bib y csl: apa.csl ya nos queda todo OK.\n\n\n\n\n\nUna vez generados los archivos y configurado el yalm ya podemos incluir las citas en el texto. Para eso lo √∫nico que tenemos que hacer es llamar a la cita. Esto lo hacemos de la misma forma en la que, por ejemplo, etiquetamos/arrobamos a alguien en instagram o en twitter. Con tan solo escribir la @ y el nombre de la cita ya nos queda incluida en el texto.\nPero‚Ä¶¬øCu√°l es el nombre de la cita? Eso lo encontramos en el archivo .bib que creamos antes.\n\n\n\n\nEse nombre puede cambiarse por alguno que sea m√°s f√°cil de recordar o que la identifique mejor. Por lo general ese nombre incluye autor y a√±o de publicaci√≥n. Uds. pueden escribir el que prefieran.\nOtra forma muy √∫til y que viene con un mejor ‚Äúdise√±o‚Äù es citar utilizando el modo visual que se ofrece en rmarkdown o quarto. En este modo, apenas se escribe @ se despliega un men√∫ con todas las citas que tengamos cargadas en el archivo .bib. Seleccionamos la que queremos y listo!\n\n\n\n\nBueno, ya tengo la cita en el texto. ¬øTengo que incluirla en la bibliografia al final del documento? No!\nPongamos un ejemplo con la siguiente frase:\n\nVer/Ocultar c√≥digo*Los gr√°ficos los hice con* @ggplot y @ggstatsplot\n\n\nLos gr√°ficos los hice con Wickham (2016) y Patil (2021)\nEn este ejemplo podemos notar dos cosas. La primera es que se genero la cita con nombre del autor y el a√±o incluido entre par√©ntesis. Ademas, si pasamos el puntero por arriba del a√±o se va a mostrar una peque√±a ventana con la referencia completa. La segunda es que si nos dirigimos al final de este sitio nos vamos a encontrar con un nuevo apartado que es el de las referencias. Ese apartado se genera autom√°ticamente incluyendo todo lo que citemos y en el formato que especificamos en el csl del YALM. Un golazo, no?\n\n\n\n\n\n\nSintaxis para citar\n\n\n\n\n\n\n\nForma de citar\nResultado\n\n\n\n@ggplot\nWickham (2016)\n\n\n[@ggplot]\n(Wickham, 2016)\n\n\n[@ggplot; @ggstatsplot]\n(Patil, 2021; Wickham, 2016)\n\n\n[-@ggplot]\n(2016)"
  },
  {
    "objectID": "reunion5.html",
    "href": "reunion5.html",
    "title": "Quinta Reuni√≥n",
    "section": "",
    "text": "Warning: package 'tidyverse' was built under R version 4.2.2\n\n\n‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.2 ‚îÄ‚îÄ\n‚úî ggplot2 3.4.0      ‚úî purrr   0.3.5 \n‚úî tibble  3.1.8      ‚úî dplyr   1.0.10\n‚úî tidyr   1.2.1      ‚úî stringr 1.5.0 \n‚úî readr   2.1.3      ‚úî forcats 0.5.2 \n\n\nWarning: package 'ggplot2' was built under R version 4.2.2\n\n\nWarning: package 'tibble' was built under R version 4.2.2\n\n\nWarning: package 'tidyr' was built under R version 4.2.2\n\n\nWarning: package 'readr' was built under R version 4.2.2\n\n\nWarning: package 'purrr' was built under R version 4.2.2\n\n\nWarning: package 'dplyr' was built under R version 4.2.2\n\n\nWarning: package 'stringr' was built under R version 4.2.2\n\n\nWarning: package 'forcats' was built under R version 4.2.2\n\n\n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n\n\nWarning: package 'patchwork' was built under R version 4.2.2"
  },
  {
    "objectID": "reunion5.html#graficando-con-r",
    "href": "reunion5.html#graficando-con-r",
    "title": "Quinta Reuni√≥n",
    "section": "Graficando con R",
    "text": "Graficando con R\nExisten muchos paquetes que nos permiten visualizar nuestros datos. En R base tenemos la funcion plot() y sus variantes, pero tambi√©n podemos encontrar a Plotly (Sievert, 2020), RGL, Lattice (Sarkar, 2008), ggstatsplot (Patil, 2021) y varios m√°s. El paquete que vamos a utilizar nosotros ser√° ggplot2 (Wickham, 2016) que forma parte del tidyverse (Wickham et al., 2019).\nLo bueno de este paquete es que tiene la misma filosof√≠a del tidyverse por lo que, al visualizar datos, tambi√©n podremos utilizar funciones de paquetes como dplyr, forcats o cualquier otro dentro del universo tidy. ggplot trabaja por capas. En principio se crea una base del gr√°fico (1ra capa) y luego se van agregando las dem√°s (datos, est√©ticas, aspectos y otras m√°s). Eso es a grandes rasgos lo que se hace con este paquete."
  },
  {
    "objectID": "reunion5.html#instalaci√≥n-y-carga",
    "href": "reunion5.html#instalaci√≥n-y-carga",
    "title": "Quinta Reuni√≥n",
    "section": "Instalaci√≥n y carga",
    "text": "Instalaci√≥n y carga\n\nInstalaci√≥n install.packages(\"ggplot2\") (o si ya instalaron el tidyverse entonces viene incluido)\nCarga library(\"ggplot2\") (o si ya cargaron el tidyverse entonces viene incluido. Ver abajo)\nTidyverse\n\n\nVer/Ocultar c√≥digolibrary(tidyverse) # Esto carga una serie de paquetes, entre ellos ggplot\n\n ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.1 ‚îÄ‚îÄ\n ‚úî ggplot2 3.3.6     ‚úî purrr   0.3.4\n ‚úî tibble  3.1.7     ‚úî dplyr   1.0.9\n ‚úî tidyr   1.2.0     ‚úî stringr 1.4.0\n ‚úî readr   2.1.2     ‚úî forcats 0.5.1\n ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n ‚úñ dplyr::filter() masks stats::filter()\n ‚úñ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "reunion5.html#arrancando-con-ggplot",
    "href": "reunion5.html#arrancando-con-ggplot",
    "title": "Quinta Reuni√≥n",
    "section": "Arrancando con ggplot",
    "text": "Arrancando con ggplot\nComo se menciona m√°s arriba, el paquete ggplot ofrece una gram√°tica para graficar que funciona a trav√©s de capas (si alguna vez usaste programas de dise√±o como por ej. Photoshop entones la l√≥gica es m√°s o menos la misma)\n\n\nCapa 1 Si tan solo usamos la funci√≥n ggplot(), lo que obtenemos es lo siguiente:\n\n\nVer/Ocultar c√≥digoggplot()\n\n\n\n\nEsta seria la capa principal. Como si fuera la base del gr√°fico. Sobre esta base es que luego se agregan los dem√°s aspectos del gr√°fico.\n\nCapa 2.1\n\nEsta segunda capa comprende los datos que se visualizaran. Entones dentro de la funci√≥n ggplot() el primer argumento es data y all√≠ es donde ingresamos nuestro objeto con los datos. Como pueden ver abajo, si solo se ingresan los datos el resulado no cambia. Para eso hay que agregar aspectos.\n\nVer/Ocultar c√≥digodatosEj <- tibble(ejex = 1:9, # Este el objeto con los datos. En este caso no tiene mucho sentido\n                  ejey = 1:9) # mas alla del ejemplo, pero es necesario para poner algo en el argumento data\n\n\nggplot(data = datosEj)\n\n\n\n\n\nCapa 2.2\n\nPara agregar los aspectos o aes() lo que hay que hacer es incluir un nuevo argumento luego de data. Como se ve en el c√≥digo de abajo, luego de data se agrega mapping y dentro de este argumento se especifican las aes(). El resultado que se obtiene en esta instancia es que ahora a la base del grafico se le suman los ejes y el rango de valores. Esto puede variar en funcion del tipo de variable que incluyamos en cada eje.\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = 1:9,\n                  Eje_Y = 1:9)\n\n# Aqui es donde se incluyen las variables para # los ejes X e Y\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y)) \n\n\n\n\nEl resultado que se obtiene en esta instancia es que ahora a la base del gr√°fico se le suman los ejes y el rango de valores. Esto puede variar en funci√≥n del tipo de variable que incluyamos en cada eje. Arriba graficamos dos variables num√©ricas, mientras que en el resultado de abajo se grafica una variable num√©rica y otra categ√≥rica con tres niveles (A; B; C)\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = rep(c(\"A\",\"B\", \"C\"), 3), # Creamos la variable categ√≥rica. Repetimos A B y C tres veces\n                  Eje_Y = 1:9)\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y)) # En el eje X incluimos la variable categ√≥rica\n\n\n\n\n\nCapa 3\n\nYa tenemos una base, los datos, los ejes definidos. Qu√© m√°s falta? Los aspectos geom√©tricos!! Barras? Columnas? Puntos? Tortas?. Bueno, estos √∫ltimos tal vez casi nunca (por si quieren leer sobre esto: Link 1; Link 2; Link 3; Link 4).\nVamos con el primer ejemplo con dos variables num√©ricas. Para este caso uno de los geom_ utilizados puede ser geom_point(). Esto nos genera un gr√°fico de dispersi√≥n o scatterplot. La manera de agregar esta capa es utilizando el +.\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = 1:9,\n                  Eje_Y = 1:9)\n\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y)) + # Con el + sumamos la siguiente capa\n  geom_point() \n\n\n\n\nPueden utilizarse varios geom dentro del mismo gr√°fico. Se agrega una capa m√°s y listo.\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = 1:9,\n                  Eje_Y = 1:9,\n                  Eje_Xinvertido = 1:9,\n                  Eje_Yinvertido = 9:1)\n\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y)) + # Con el + sumamos la siguiente capa\n  geom_point() + # En este caso son puntos\n  geom_point(mapping = aes(x = Eje_Xinvertido, y = Eje_Yinvertido))  # Incluso puede sumarse otra capa mas\n\n\n\n\nEn el caso de la base con variables num√©ricas y categ√≥ricas. En este caso, podria sernos de utilidad geom_col\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = rep(c(\"A\",\"B\", \"C\"), 3), # Creamos la variable categ√≥rica. Repetimos A B y C tres veces\n                  Eje_Y = 1:9)\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y)) +\n  geom_col()\n\n\n\n\nSi necesitamos dar un poco m√°s de informaci√≥n, entonces podr√≠amos usar geom_boxplot o geom_violin. Con el primero hacemos un gr√°fico de cajas y con el seg√∫n un gr√°fico con violines\n\nCajas\n\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = rep(c(\"A\",\"B\", \"C\"), 3), # Creamos la variable categ√≥rica. Repetimos A B y C tres veces\n                  Eje_Y = 1:9)\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y)) +\n  geom_boxplot()\n\n\n\n\n\nViolines\n\n\nVer/Ocultar c√≥digodatosEj <- palmerpenguins::penguins # En este ejemplo use pinguinos porque quedaba mejor que los datos inventados\n\n\nggplot(data = datosEj, mapping = aes(x = species, y = body_mass_g)) +\n  geom_violin()\n\nWarning: Removed 2 rows containing non-finite values (`stat_ydensity()`)."
  },
  {
    "objectID": "reunion5.html#m√°s-y-m√°s-capas",
    "href": "reunion5.html#m√°s-y-m√°s-capas",
    "title": "Quinta Reuni√≥n",
    "section": "M√°s y m√°s capas",
    "text": "M√°s y m√°s capas\nOtras capas muy utilizadas son las del titulo, subtitulo y nombres de los ejes. Esto se puede modificar agregando otra capa que incluya labs\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = rep(c(\"A\",\"B\", \"C\"), 3), # Creamos la variable categ√≥rica. Repetimos A B y C tres veces\n                  Eje_Y = 1:9)\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y)) +\n  geom_col() +\n  labs(title = \"Grafico con tres columnas\",\n       x = \"Variable categorica\",\n       y = \"Variable numerica\")\n\n\n\n\nTambien pueden rotarse los ejes. A veces es √∫til para visualizar mejor los datos. La funci√≥n que nos permite eso es coord_flip Por ejemplo, rotemos el gr√°fico de arriba\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = rep(c(\"A\",\"B\", \"C\"), 3), # Creamos la variable categ√≥rica. Repetimos A B y C tres veces\n                  Eje_Y = 1:9)\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y)) +\n  geom_col() +\n  labs(title = \"Grafico con tres columnas\",\n       x = \"Variable categorica\",\n       y = \"Variable numerica\") +\n  coord_flip()\n\n\n\n\n¬øY donde esta el color?\nLos colores pueden incluirse de muchas maneras. Una de ellas es incluir colour o color (como gusten) en las aes del principio. Otra opcion es rellenar el geom con fill. Por ejemplo:\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = rep(c(\"A\",\"B\", \"C\"), 3), # Creamos la variable categ√≥rica. Repetimos A B y C tres veces\n                  Eje_Y = 1:9)\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y, fill = \"orange\")) +\n  geom_col() +\n  labs(title = \"Grafico con tres columnas\",\n       x = \"Variable categorica\",\n       y = \"Variable numerica\") +\n  coord_flip()\n\n\n\n\nNo solo pueden incluirse colores, sino que tambien pueden usarse otras variables categoricas. Por ejemplo\n\nVer/Ocultar c√≥digodatosEj <- tibble(Eje_X = rep(c(\"A\",\"B\", \"C\"), 3), # Creamos la variable categ√≥rica. Repetimos A B y C tres veces\n                  Eje_Y = 1:9,\n                  mascolor = rep(c(\"D\", \"E\", \"F\"), 3))\n\n\nggplot(data = datosEj, mapping = aes(x = Eje_X, y = Eje_Y, fill = mascolor)) +\n  geom_col() +\n  labs(title = \"Grafico con tres columnas\",\n       x = \"Variable categorica\",\n       y = \"Variable numerica\") +\n  coord_flip()\n\n\n\n\nCon datos que no son inventados esto cobra mucho m√°s sentido. Veamos con pinguinos.\n\nVer/Ocultar c√≥digodatosEj <- palmerpenguins::penguins |> na.omit()\n\n\nggplot(data = datosEj, mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point() +\n  labs(title = \"Tama√±o del pico en funci√≥n del peso\",\n       x = \"Peso en gramos\",\n       y = \"Tama√±o del pico\")"
  },
  {
    "objectID": "reunion5.html#ultima-capa",
    "href": "reunion5.html#ultima-capa",
    "title": "Quinta Reuni√≥n",
    "section": "Ultima capa",
    "text": "Ultima capa\nLo √∫ltimo que suele agregarse a un gr√°fico es el tema (traducci√≥n directa de theme). Esto lo que hace es cambiar el aspecto general del gr√°fico. Existen themes predeterminados como por ejemplo: theme_bw, theme_light, theme_linedraw, theme_minimal y asi. Pueden ir probando todos y luego decidir cual queda mejor en su trabajo. Y tambien pueden customizar su propia theme, pero eso es una tarea un poco m√°s compleja (pueden leer de eso aca).\n¬øComo se agrega el theme? Como todas las capas, con el + y la funci√≥n theme_NOMBRE. Veamos algunos de los mencionados arriba.\n\nVer/Ocultar c√≥digodatosEj <- palmerpenguins::penguins |> na.omit()\n\n\np1 <- ggplot(data = datosEj, mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point() +\n  labs(title = \"theme_bw\",\n       x = \"Peso en gramos\",\n       y = \"Tama√±o del pico\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\np2 <- ggplot(data = datosEj, mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point() +\n  labs(title = \"theme_light\",\n       x = \"Peso en gramos\",\n       y = \"Tama√±o del pico\") +\n  theme_light() +\n  theme(legend.position = \"none\")\n\np3 <- ggplot(data = datosEj, mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point() +\n  labs(title = \"theme_minimal\",\n       x = \"Peso en gramos\",\n       y = \"Tama√±o del pico\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\np4 <- ggplot(data = datosEj, mapping = aes(x = body_mass_g, y = bill_length_mm, colour = species)) +\n  geom_point() +\n  labs(title = \"theme_linedraw\",\n       x = \"Peso en gramos\",\n       y = \"Tama√±o del pico\") +\n  theme_linedraw() +\n  theme(legend.position = \"bottom\")\n\n\np1 + p2 + p3 + p4"
  },
  {
    "objectID": "reunion6.html#haciendo-tablas-con-r",
    "href": "reunion6.html#haciendo-tablas-con-r",
    "title": "Sexta Reuni√≥n",
    "section": "Haciendo tablas con R",
    "text": "Haciendo tablas con R"
  },
  {
    "objectID": "reunion6.html#datos",
    "href": "reunion6.html#datos",
    "title": "Sexta Reuni√≥n",
    "section": "Datos",
    "text": "Datos\n\nVer/Ocultar c√≥digodatos <- read_excel(\"datos/argentina_esp.xlsx\") # Asi cargamos los datos\n\n\ndatos %>% glimpse() # Le damos un primer vistazo a los datos \n\nRows: 347\nColumns: 10\n$ set                      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ numero                   <chr> \"1030\", \"1040\", \"1070\", \"1080\", \"1200\", \"1220‚Ä¶\n$ desc                     <chr> \"Serpienie\", \"Serpiente\", \"Serpiente\", \"Serpi‚Ä¶\n$ valencia_media_general   <dbl> 4.22, 3.86, 3.54, 3.93, 3.89, 4.02, 4.37, 3.9‚Ä¶\n$ valencia_DE_general      <dbl> 2.01, 2.10, 2.01, 2.00, 1.89, 1.89, 1.79, 1.8‚Ä¶\n$ arousal_media_general    <dbl> 6.22, 7.01, 6.94, 6.35, 6.42, 6.60, 5.76, 5.8‚Ä¶\n$ arousal_DE_general       <dbl> 2.25, 215.00, 2.20, 2.10, 2.32, 2.15, 2.15, 2‚Ä¶\n$ dominancia_media_general <dbl> 4.04, 3.53, 3.83, 3.69, 4.04, 4.42, 4.58, 4.4‚Ä¶\n$ dominancia_DE_general    <dbl> 2.35, 2.44, 2.73, 2.21, 2.40, 2.56, 2.17, 2.3‚Ä¶\n$ pais                     <chr> \"esp\", \"esp\", \"esp\", \"esp\", \"esp\", \"esp\", \"es‚Ä¶\n\n\nOrdenando un poco‚Ä¶\n\nVer/Ocultar c√≥digodatos_ordenados <- datos %>% \n  select(set, pais, starts_with(c(\"valencia\", \"arousal\", \"dominancia\"))) %>% # Con esto selecciono todas las que arrancon con \"texto\"\n  mutate(\n    pais_factor = as_factor(pais)\n  ) %>% \n  relocate(\n    c(\"pais_factor\", \"pais\"), .after = dominancia_DE_general # Acomodo dos variables\n  )\n\n# Esta es una manera de hacer tablas.\n# Usar la funci√≥n kable de knitr (que es el paquete\n# que renderea el documento)\n\nknitr::kable(head(datos_ordenados))  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nset\nvalencia_media_general\nvalencia_DE_general\narousal_media_general\narousal_DE_general\ndominancia_media_general\ndominancia_DE_general\npais_factor\npais\n\n\n\n1\n4.22\n2.01\n6.22\n2.25\n4.04\n2.35\nesp\nesp\n\n\n1\n3.86\n2.10\n7.01\n215.00\n3.53\n2.44\nesp\nesp\n\n\n1\n3.54\n2.01\n6.94\n2.20\n3.83\n2.73\nesp\nesp\n\n\n1\n3.93\n2.00\n6.35\n2.10\n3.69\n2.21\nesp\nesp\n\n\n1\n3.89\n1.89\n6.42\n2.32\n4.04\n2.40\nesp\nesp\n\n\n1\n4.02\n1.89\n6.60\n2.15\n4.42\n2.56\nesp\nesp\n\n\n\n\n\nUna vez que tenemos los datos que queremos ya podemos generar la tabla. Hay muchas opciones para generar tablas. Una de estas opciones es generarla ‚Äúa mano‚Äù. Tendriamos que hacer las correlaciones y luego incrustar los resultados en cada seccion de una tabla.\nVeamos:\nPara crear la tabla se utiliza markdown. Lo que se debe hacer es lo siguiente:\n| nombre | est1 | Col3 |\n|------|------|------|\n|   asd   |  asd    | asd     |\n|   asd   |   ads   |      |\n|      |      |      |\nLuego se llevan a cabo las correlaciones\n\nVer/Ocultar c√≥digo# El paquete correlation esta muy bueno para este analisis\n\ncorrelation::correlation(datos_ordenados) \n\n# Correlation Matrix (pearson-method)\n\nParameter1               |               Parameter2 |     r |         95% CI | t(345) |         p\n-------------------------------------------------------------------------------------------------\nset                      |   valencia_media_general |  0.01 | [-0.09,  0.12] |   0.25 | > .999   \nset                      |      valencia_DE_general | -0.11 | [-0.22, -0.01] |  -2.11 | 0.429    \nset                      |    arousal_media_general |  0.08 | [-0.02,  0.19] |   1.58 | > .999   \nset                      |       arousal_DE_general | -0.07 | [-0.18,  0.03] |  -1.32 | > .999   \nset                      | dominancia_media_general | -0.03 | [-0.14,  0.07] |  -0.60 | > .999   \nset                      |    dominancia_DE_general | -0.22 | [-0.32, -0.12] |  -4.29 | < .001***\nvalencia_media_general   |      valencia_DE_general |  0.06 | [-0.04,  0.16] |   1.13 | > .999   \nvalencia_media_general   |    arousal_media_general | -0.66 | [-0.71, -0.59] | -16.18 | < .001***\nvalencia_media_general   |       arousal_DE_general | -0.03 | [-0.14,  0.07] |  -0.62 | > .999   \nvalencia_media_general   | dominancia_media_general |  0.38 | [ 0.28,  0.46] |   7.55 | < .001***\nvalencia_media_general   |    dominancia_DE_general | -0.34 | [-0.43, -0.24] |  -6.73 | < .001***\nvalencia_DE_general      |    arousal_media_general |  0.14 | [ 0.03,  0.24] |   2.61 | 0.123    \nvalencia_DE_general      |       arousal_DE_general |  0.08 | [-0.02,  0.19] |   1.55 | > .999   \nvalencia_DE_general      | dominancia_media_general | -0.06 | [-0.17,  0.04] |  -1.18 | > .999   \nvalencia_DE_general      |    dominancia_DE_general |  0.35 | [ 0.25,  0.44] |   6.93 | < .001***\narousal_media_general    |       arousal_DE_general |  0.09 | [-0.01,  0.20] |   1.77 | 0.857    \narousal_media_general    | dominancia_media_general | -0.39 | [-0.47, -0.30] |  -7.84 | < .001***\narousal_media_general    |    dominancia_DE_general |  0.39 | [ 0.30,  0.48] |   7.95 | < .001***\narousal_DE_general       | dominancia_media_general | -0.04 | [-0.14,  0.07] |  -0.68 | > .999   \narousal_DE_general       |    dominancia_DE_general |  0.05 | [-0.05,  0.16] |   0.95 | > .999   \ndominancia_media_general |    dominancia_DE_general | -0.21 | [-0.31, -0.11] |  -3.96 | 0.001**  \n\np-value adjustment method: Holm (1979)\nObservations: 347\n\n\nY lo que restar√≠a seria armar la tabla resultado por resultado. El problema de esto es que no es muy reproducible que digamos, es tedioso y puede llevarnos a cometer errores."
  },
  {
    "objectID": "reunion6.html#apatables",
    "href": "reunion6.html#apatables",
    "title": "Sexta Reuni√≥n",
    "section": "ApaTables",
    "text": "ApaTables\nEntonces, una de las opciones que podemos utilizar para evitar lo de arriba es el paquete apaTables (Stanley, 2021). Este paquete genera tablas en formato apa luego de realizar la estad√≠stica.\nPara utilizarlo, primero lo instalamos (Si ya lo tienen, entonces omitir esto)\n\n\n\nLuego lo cargamos\n\n\n\nAhora si podemos generar nuestra tabla de correlaciones.\n\n\nNew names:\n‚Ä¢ `pais_factor` -> `pais_factor...1`\n‚Ä¢ `pais_factor` -> `pais_factor...4`\n\n\nSi vamos al archivo‚Ä¶"
  },
  {
    "objectID": "reunion6.html#paquete-rempsyc",
    "href": "reunion6.html#paquete-rempsyc",
    "title": "Sexta Reuni√≥n",
    "section": "Paquete rempsyc",
    "text": "Paquete rempsyc\n\nVer/Ocultar c√≥digomodelo_Dif <- nice_t_test(data = datos_ordenados,\n                                 response = \"arousal_media_general\",\n                                 group = \"pais_factor\",\n                                 warning = FALSE)\n\n#nice_table(modelo_Dif)\n\n\n\n\n\n\nIntegrado con el paquete report\n\nVer/Ocultar c√≥digomodelo_diferencias <- t.test(arousal_media_general ~ pais_factor, datos_ordenados)\n\nmodelo_diferencias\n\n\n    Welch Two Sample t-test\n\ndata:  arousal_media_general by pais_factor\nt = 3.3642, df = 332.04, p-value = 0.0008575\nalternative hypothesis: true difference in means between group esp and group arg is not equal to 0\n95 percent confidence interval:\n 0.182999 0.698348\nsample estimates:\nmean in group esp mean in group arg \n         5.046429          4.605755 \n\nVer/Ocultar c√≥digotabla_diferencias <- as.data.frame(report(modelo_diferencias))\n\nWarning: Unable to retrieve data from htest object. Returning an approximate\n  effect size using t_to_d().\n\nVer/Ocultar c√≥digotabla_diferencias %>% rename(\"Media Espa√±a\" = Mean_Group1,\n                             \"Media Argentina\" = Mean_Group2,\n                             Respuesta = Parameter,\n                             Grupo = Group) %>% \n  select(-Difference) %>% \n  nice_table(., report = \"t.test\", short = T) %>% \n  flextable::save_as_docx(., path = \"resultados/t-tests.docx\")\n\n\nSi vamos al archivo‚Ä¶"
  }
]